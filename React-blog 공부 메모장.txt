2022-02-06 Study ______________________________________________________________________________________________________________

- npm start 보다는 yarn start 가 더 빠르고 안정적으로 시작할 수 있다
- 본인이 디자인 하기 힘들때는, BootStrap나 다른 외부 source library 이용해서 사이트를 만들 수도 있다
(이번 프로젝트에서는 대표적으로 bootstrap을 이용해 사이트를 만들 것)
- 사용하기 위해서는 "react bootstrap" 을 검색해 따라하면 된다

2022-02-09 Study ______________________________________________________________________________________________________________

- 긴 함수나 긴 데이터의 경우 한 파일에 보관하기에는 시각적으로 좋지 않아 import 와 export를 응용해
데이터를 간추린다.

- export default 같은 경우는 데이터를 한가지만 보낼때 사용하고, export { temp1, temp2 } 를 사용해 여러가지 데이터도
전송이 가능하다 (웬만하면 export default 를 많이 사용함)
	* export default를 쓸 시 import를 하는 쪽에서 이름을 다시 재정의 할 수 있음

- component를 만들때는 항상 첫 글자가 대문자여야 한다 까먹지 말 것!
	* component를 받아 사용할 때 props로 모두 가져와서 사용하는 방법 말고, 직접 하나씩 가져오는 방법을 더 많이 사용한다

- 간단한 반응형 정도는 bootstrap과 같은 라이브러리에서 끌어다가 쓰는 경우도 다분하다
	ex) <div className = "col-md-4"> </div>

2022-02-09 Study (afternoon) _________________________________________________________________________________________________

React Router 01

- react router을 사용하기 위해선 yarn add react-router-dom 이라는 커맨드를 사용해 라이브러리를 설치 해야 한다

- 설치를 완료한 후, index.js에 들어가서 추가적인 설정을 해주면 react router을 사용할 준비가 끝난다
	index.js 에는:
			import { BrowserRouter } from "react-router-dom"; 추가
			ReactDOM.render 에 있는 <App />에 <BrowserRouter> </BrowserRouter> 추가

- <Route></Route> 를 사용할때는 path를 설정해두면 웹사이트에서 그 경로를 입력할 시 안에 적어둔 html을 띄워준다
다만, <Route path="/temp"> 로 작성하면 기존에 있던것과 함께 다 같이 뜨기 때문에 <Route exact path ="/temp"> 를
사용하는게 좋다

- BrowserRoute 과 HashRouter의 차이점:
	HashRouter은 더 안전하게 라우팅 할 수 있게 해줌
	BrowserRouter 같은 경우 라우팅을 리액트가 아니라 서버에게 요청할 수도 있어서 위험
따라서, BrowserRouter은 서버에서 서버 라우팅 방지하는 API를 작성해둬야함

* 추가정보:
	최신버전의 React Router에서는      <Route exact path="/temp"> </Route> 의 형식이 먹히지 않아
	5.3.0 버전의 react-router-dom 을 다시 설치해줌

2022-02-10 Study ______________________________________________________________________________________________________________

React Router 02, 03

- Routes (Switch)를 알면 exact path을 사용하지 않아도 중복되게 나타지지가 않는다
	*사용법은 <Route></Route> 되어 있는 곳에 <Routes>로 감싸주면 된다

- 다른 컴포넌트에서 main에 있는 데이터를 받아올 때는 항상 props상으로 받아오는게 좋다
- useParams 는 Route상에서 받아와지는 id를 function에 전달해 주는 역할을 함
	*사용하기 위해선 import { useParams } from 'react-router-dom' 를 선언하고
	* Route 의 path에서 "/temp/:id" 를 넣어둔다
	* const { temp } = useParams(); 를 사용하면 id를 클릭할때 id의 값을 useParams()를 사용하는 temp에 전해준다
	**** 추가공부를 더 하면서 직접 더 알아보면 좋을 듯 하다


2022-02-11 Study ______________________________________________________________________________________________________________

- styled-component: 
	css 를 미리 입혀놓은 컴포넌트
	편리하게 보이긴 하지만 수십개의 div에서 수십개의 컴포넌트로 바뀌는것
	(class가 겹치는 가능성은 배제시켜주긴 한다) *선택사항

ex) 
let Box = styled.div`
  padding: 20px;
`;
let Title = styled.h4`
  font-size: 25px;
  color: ${(props) => props.color};
`;

- SASS의 여러가지 사용법: 
	sass는 css를 더 쉽고 직관적이게 사용할 수 있게 해주는 library 이다.
	설치: yarn add node-sass

좋은 기능 1
	nesting (상당히 좋아보임)
	ex) nesting을 사용하기 전인 기본 css 문법: 
		 div.container h4 {
		   color: blue;
		 }
		 div.container p {
		   color: green;
		 }
	sass를 활용해 nesting을 사용한 css 문법
		 div.container {
		   h4 {
		     color: blue;
		   }
		   p {
		     color: green;
		   }
		 }
좋은 기능 2
이런식으로 @extend를 사용하면 모든걸 다 복붙할 필요가 없음
ex) 
	.my-alert-bold {
	  @extend .my-alert;
	  font-weight: bold;
	}

- useEffect (****중요****)

컴포넌트들은 다 life cycle이 존재한다
개발자는 hook으로 컴포넌트의 인생 중간중간에 뭔가 명령을 줄 수 있다
ex) <Detail/> 퇴장 전에 이것좀 해주세요
요즘은 useEffect 라는 것을 사용해 훅을 만든다
* 몇 초 후에 코드를 실행하는 javascript 함수는 setTimeout(function()=>{}, 00ms)

컴포넌트가 등장/ 업데이트시 실행됨
(input 값을 받아서 페이지에 표시하고 있으면 계속 업데이트 되고 있기 때문에 useEffect가 계속 실행됨)
따라서 useEffect(()=>{},[here]) 에 적어두면 here이라는 state가 변경이 될때만 실행이 되라는 함수가 완성이 된다
* useEffect의 대괄호를 빈칸으로 두면 해당 component가 등장시 '한 번' 실행하고 끝나는 함수가 된다
ex) 
  useEffect(() => {
    let timer = setTimeout(() => {
      setAlert(false);
    }, 2000);
    * 컴포넌트가 사라질 때 코드를 실행시킬수도 있다
    ex) 
	return function 어쩌구() {실행할코드 ~~~}

    * setTimeout을 사용할 때는 타이머 해제 스킬을 사용해야 나중에 버그가 안난다
    return () => {
      clearTimeout(timer);
    };
  }, []);

2022-02-13 Study ______________________________________________________________________________________________________________

- 간단한 데이터 전송은 모두 props를 사용해서 넘기지만, 가끔 복잡한 데이터 전달 형식이 나올때는 contextAPI를 사용하면
덜 헷갈리게 가져올 수 있는 이점이 생긴다 ex) 컴포넌트 안에.. 컴포넌트 안에... 컴포넌트 안에..
- context 만들기:
  1. React.createContext()로 범위 생성하기 (context는 여러개 만들기도 가능)
  2. 같은 값을 공유할 HTML을 <범위>로 싸매기
  3. useContrxt(범위)로 고유된 값 사용하기

- 라이브러리 사용해서 간단한 animation 추가해보기
yarn add react-transition-group 입력

**animation은 상당히 복잡해서 여러번 해보면서 경험을 쌓아야 완벽하게 쓸 수 있을듯 싶다**

- animation 만들기:
  1. <CSSTransition></CSSTransition> 으로 애니메이션 필요한 곳 감싸기
  2. in, classNames, timeout 넣기
  3. class로 애니메이션 넣기
  4. 원할 때 스위치 켜기 / 끄기 (버튼 누르면 스위치 끔) (컴포넌트 로드/업데이트시 스위치 켬)

*** 삼항연산자를 활용한 화면 on/off 기능과, CSSAnimation 기능을 같이 겹쳐놓을 시, 애니메이션이 꼬이게 되는 현상이 있으므로
삼항연산자를 활용한 on/off 기능을 꺼야 Animation이 원활하게 돌아간다 *** (이에 대한 예시는 Detail.js 40번째 줄부터 참고)

2022-02-14 Study ______________________________________________________________________________________________________________
Redux 1, Redux 2 Study

- Redux 사용:
 ContextAPI와 비슷한 종류

- redux 쓰는 이유?
 1. props 없이 모든 컴포넌트가 state를 갖다쓰기 가능
 2. state 데이터 관리기능

- redux 셋팅하기:
 1. import{Provider}
 2. <Provider></Provider> 로 <App> 감싸기
 3. createStore()안에 state 저장
 4. <Provider></Provider> 에 props 전송

- 컴포넌트에서 store에 있는 state 쓰려면
 1. function 만들기
 2. export default connect()()
 3. store 데이터를 props로 등록하기

- Redux에서 필수적으로 알아야 하는 용어 4가지
1. Action
2. Reducer
3. Store
4. dispatch

- Redux에선 state 데이터의 수정방법을 미리 정의한다
* 사실 지금 프로젝트는 redux 쓸 이유가 크게 없다 (조그만 사이트에선 딱히 필요없음)
하지만 프로젝트의 규모가 커지면 커질수록 간편해지며 버그가 걸릴 위험도가 줄어든다

2022-02-19 Study ______________________________________________________________________________________________________________
Redux 3, Redux 4, Redux 5 Study

- *** redux의 신문법 **** :
	예전 같은 경우, 직접 function을 만들어서 props를 거쳐 redux에서 받아오는 형식을 사용했다
	ex) 
		 function getCart(state) {
		   return {
		     state: state.reducer,
		     alertIsOpen: state.alertReducer,
		   };
		 }
		 export default connect(getCart)(Cart);

	하지만 새로나온 문법의 경우, useSelector 과 useDispatch만 사용하면 쉽게 props를 거치치 않고도 가져올 수 있다
	ex)
		//* function Cart() 안에 적을것
		  const state = useSelector((state) => state.reducer);
		  const alertIsOpen = useSelector((state) => state.alertReducer);
		  const dispatch = useDispatch();
		export default Cart;

- dispatch를 할 때 data를 실어 보내는 방법:
	받아오는 index함수에서는 reducer함수 내에서 action을 이용해 받아올 수 있다
	(action.data 를 하면 해당 action.type에서 받아온 데이터를 사용할 수 있다)

	데이터를 실어오는 법은, dispatch를 사용할 때
		dispatch ({ type: "temp" data: { . . . } })
	와 같은 방식으로 data를 실어 보내면 된다